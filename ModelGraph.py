# -*- coding: utf-8 -*-
"""Copy of project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1drKvjQz9zViqKPcD4X2NPYAwpXVi48XD
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import pickle

dataset=pd.read_csv('evdataset.csv')
# x=dataset.iloc[:,:].values
# y=dataset.iloc[:,:].values

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
label=le.fit_transform(dataset["Make"])
dataset.drop("Make",axis=1,inplace=True)
dataset["Make"]=label
label2=le.fit_transform(dataset["Drive"])
dataset.drop("Drive",axis=1,inplace=True)
dataset["Drive"]=label2
#dataset

x=dataset.drop(['link','Electric Range'],axis=1).values
y=dataset['Electric Range'].values

from sklearn.model_selection import train_test_split
x = pd.DataFrame(x)
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=0)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
normalized_x_train = pd.DataFrame(
    sc.fit_transform(x_train),
   columns = x_train.columns
)

#from sklearn.linear_model import LinearRegression
#ml=LinearRegression()
#ml.fit(x_train,y_train)

normalized_x_test = pd.DataFrame(
    sc.transform(x_test),
    columns = x_test.columns
)

from sklearn.linear_model import LinearRegression
ml=LinearRegression()
ml.fit(normalized_x_train,y_train)

y_pred=ml.predict(normalized_x_test)
#np.set_printoptions(precision=2)
#print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),axis=1))
print(y_pred)

from sklearn.metrics import r2_score
print(r2_score(y_test,y_pred))

from sklearn.metrics import mean_squared_error
l_m=mean_squared_error(y_test,y_pred)
l_m

# x_features=['id','City - Cold Weather','Highway - Cold Weather','Combined - Cold Weather','City - Mild Weather','Highway - Mild Weather','Combined - Mild Weather','Acceleration','Top Speed','Total Power','Total Torque','Electric Range']
# fig,ax=plt.subplots(1,4,figsize=(15,3),sharey=True)

# for i in range(len(ax)):
#     ax[i].scatter(x_train[:,i],y_train, label = 'target')
#     ax[i].set_xlabel(x_features[i])
#     ax[i].scatter(x_train[:,i],ml.predict(x_train),c='orange', label = 'predict')
# ax[0].set_ylabel("Speed"); ax[0].legend();
# #fig.suptitle("target versus prediction using z-score normalized model")
# plt.show()
# figure,axis=plt.subplots(2,1)
# for i in range(2):
#   axis[i].scatter(normalized_x_train[:,i],ml.predict(normalized_x_train))
# plt.show()
fig,ax=plt.subplots(5,4,figsize=(15,20))
k=0
title=['id','City - Cold Weather','Highway - Cold Weather','Combined - Cold Weather','City - Mild Weather','Highway - Mild Weather','Combined - Mild Weather','Acceleration','top speed','total power','total torque','drive','battery capacity','charge power','charge speed','fast charge speed','length','width','height','payload','cargo volume','']
for i in range(5):
  for j in range(4):
   ax[i][j].scatter(x=normalized_x_train[k],y=y_train,color='green')
   ax[i][j].scatter(x=normalized_x_train[k],y=ml.predict(normalized_x_train),color='mistyrose')
   ax[i][j].set_xlabel(title[k])
   k+=1
plt.show()

# g=plt.scatter(y_test, y_pred)
# g.axes.set_yscale('log')
# g.axes.set_xscale('log')
# g.axes.set_xlabel('True Values ')
# g.axes.set_ylabel('Predictions ')
# g.axes.axis('equal')
# g.axes.axis('square')
# g=plt.plot(y_test- y_pred,marker='o',linestyle='')

plt.figure(figsize=(5,5))
plt.scatter(y_test,y_pred, c='crimson')
plt.yscale('log')
plt.xscale('log')

p1 = max(max(y_pred), max(y_test))
p2 = min(min(y_pred), min(y_test))
plt.plot([p1, p2], [p1, p2], 'b-')
plt.xlabel('True Values', fontsize=15)
plt.ylabel('Predictions', fontsize=15)
plt.axis('equal')
plt.show()